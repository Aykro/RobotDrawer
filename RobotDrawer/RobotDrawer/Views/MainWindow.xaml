<Window x:Class="RobotDrawer.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RobotDrawer.Views"
        xmlns:localVMs="clr-namespace:RobotDrawer.ViewModels"
        xmlns:localModels="clr-namespace:RobotDrawer.Models"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:md="https://github.com/fantasticfiasco/mvvm-dialogs"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:command="http://www.galasoft.ch/mvvmlight"
        xmlns:beh ="clr-namespace:RobotDrawer.Behaviours"
        md:DialogServiceViews.IsRegistered="True"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="768" Width="1024"
        WindowState="Normal">

    <Window.Resources>
        <Style x:Key="ColourPickStyle"
               TargetType="RadioButton">
            <Setter Property="BorderBrush"
                    Value="Gray"/>
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="Width"
                    Value="30"/>
            <Setter Property="Cursor"
                    Value="Pen"/>
        </Style>
        <Style x:Key="ShapeButtonStyle"
               TargetType="RadioButton">
            <Setter Property="BorderBrush"
                    Value="Gray"/>
            <Setter Property="Height"
                    Value="25"/>
            <Setter Property="Width"
                    Value="60"/>
            <Setter Property="Background"
                    Value="GhostWhite"/>
        </Style>
        <!-- Insert here your Data Templates -->
        <DataTemplate x:Key="SampleTemplate">
            <StackPanel/>
        </DataTemplate>

    </Window.Resources>
    <Window.InputBindings>
        <!-- Example of Keyboard shortcuts -->
        <KeyBinding Command="{Binding SaveCmd}" Key="S" Modifiers="Ctrl" />
        <KeyBinding Command="{Binding SaveAsCmd}" Gesture="Ctrl+Shift+S" />
        <KeyBinding Command="{Binding OpenCmd}" Gesture="Ctrl+O" />
        <KeyBinding Command="{Binding NewCmd}" Gesture="Ctrl+N" />
        <KeyBinding Command="{Binding ExitCmd}" Gesture="Alt+F4" />
    </Window.InputBindings>

    <DockPanel>
        <!-- File Menu -->
        <Menu DockPanel.Dock="Top" Margin="0,0,0.4,0">
            <MenuItem Header="File">
                <MenuItem Header="New" Command="{Binding OnPropertyChangeTestCommand}" InputGestureText="Ctrl+N" />
                <MenuItem Header="Clear all" Command="{Binding ClearCanvaCommand}" InputGestureText="Ctrl+O" />
                <MenuItem Header="Save" Command="{Binding SaveCmd}" InputGestureText="Ctrl+S" />
                <MenuItem Header="Save As" Command="{Binding SaveAsCmd}" InputGestureText="Ctrl+Shift+S"/>
                <Separator />
                <MenuItem Header="Exit" Command="{Binding ExitCmd}" InputGestureText="Alt+F4"/>
            </MenuItem>
            <MenuItem Header="About" Command="{Binding ShowAboutDialogCmd}"/>
        </Menu>

        <StackPanel>
            <DockPanel>
                <ToolBar Name="ToolBar"
                 DockPanel.Dock="Top"
                 Height="30">
                    <RadioButton x:Name ="BlackButton" Background="Black" 
                                 Style ="{StaticResource ColourPickStyle}" 
                                 IsChecked="{Binding BlackRadiobuttonChecked}"/>
                    <RadioButton Name ="RedButton" Background="Red"
                                 Style="{StaticResource ColourPickStyle}"
                                 IsChecked="{Binding RedRadiobuttonChecked}"/>
                    <RadioButton Name = "GreenButton" Background="Green"
                                 Style="{StaticResource ColourPickStyle}"
                                 IsChecked="{Binding GreenRadiobuttonChecked}"/>

                    <Separator Background="Gray" Height="25" Width="1"/>

                    <RadioButton Name="PenButton" Content="Pen"
                         GroupName="ShapeGroup" Style="{StaticResource ShapeButtonStyle}"/>
                    <RadioButton x:Name="LineButton"  Content="Line" 
                         GroupName="ShapeGroup" Style="{StaticResource ShapeButtonStyle}"/>
                    <RadioButton x:Name="EllipseButton"
                         Style="{StaticResource ShapeButtonStyle}"
                         Content="Ellipse" GroupName="ShapeGroup"/>
                    <RadioButton x:Name="RectangleButton"  
                         Style="{StaticResource ShapeButtonStyle}"
                         Content="Rectangle" GroupName="ShapeGroup"/>
                    <RadioButton Name="ConnectButton"
                         Style="{StaticResource ShapeButtonStyle}"
                         Content="Connect" />
                    <RadioButton Name="DisconnectButton"
                         Style="{StaticResource ShapeButtonStyle}"
                         Content="Disconnect" />
                    <RadioButton Name="Eraser"
                         Style="{StaticResource ShapeButtonStyle}"
                         Content="Eraser"/>
                </ToolBar>
                <InkCanvas x:Name="MyCanvas" Background="White" Margin="10"
                           Strokes="{Binding Strokes}"
                           DefaultDrawingAttributes="{Binding DefaultDrawingAttributes, Mode=OneWay}">
                    
                    <InkCanvas.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Clear canva"/>
                        </ContextMenu>
                    </InkCanvas.ContextMenu>
                    <i:Interaction.Behaviors>
                        <beh:EventToCommandBehavior Command="{Binding MouseDownCommand}" 
                                                    Event="MouseLeftButtonDown" PassArguments="True" />
                        <beh:EventToCommandBehavior Command="{Binding MouseMoveCommand}" 
                                                    Event="MouseMove" PassArguments="True" />
                    </i:Interaction.Behaviors>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="ContextMenuOpening">
                            <i:InvokeCommandAction Command="{Binding ClearCanvaCommand}"/>
                        </i:EventTrigger>

                        <!--<i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                            <i:InvokeCommandAction Command="{Binding MouseDownCommand}" />
                        </i:EventTrigger>-->
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding MouseUpCommand}" />
                        </i:EventTrigger>
                        <!--<i:EventTrigger EventName="MouseMove">
                            <i:InvokeCommandAction Command="{Binding MouseMoveCommand}" />
                        </i:EventTrigger>-->
                    </i:Interaction.Triggers>
                </InkCanvas>

            </DockPanel>
            <!-- Place here your content -->
        </StackPanel>
    </DockPanel>
</Window>
